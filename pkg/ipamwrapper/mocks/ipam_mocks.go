// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/amazon-vpc-cni-k8s/pkg/ipamwrapper (interfaces: Ipam)

// Package mock_ipamwrapper is a generated GoMock package.
package mock_ipamwrapper

import (
	reflect "reflect"

	types "github.com/containernetworking/cni/pkg/types"
	current "github.com/containernetworking/cni/pkg/types/current"
	gomock "github.com/golang/mock/gomock"
)

// MockIpam is a mock of Ipam interface.
type MockIpam struct {
	ctrl     *gomock.Controller
	recorder *MockIpamMockRecorder
}

// MockIpamMockRecorder is the mock recorder for MockIpam.
type MockIpamMockRecorder struct {
	mock *MockIpam
}

// NewMockIpam creates a new mock instance.
func NewMockIpam(ctrl *gomock.Controller) *MockIpam {
	mock := &MockIpam{ctrl: ctrl}
	mock.recorder = &MockIpamMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIpam) EXPECT() *MockIpamMockRecorder {
	return m.recorder
}

// ConfigureIface mocks base method.
func (m *MockIpam) ConfigureIface(arg0 string, arg1 *current.Result) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigureIface", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfigureIface indicates an expected call of ConfigureIface.
func (mr *MockIpamMockRecorder) ConfigureIface(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigureIface", reflect.TypeOf((*MockIpam)(nil).ConfigureIface), arg0, arg1)
}

// ExecAdd mocks base method.
func (m *MockIpam) ExecAdd(arg0 string, arg1 []byte) (types.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecAdd", arg0, arg1)
	ret0, _ := ret[0].(types.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecAdd indicates an expected call of ExecAdd.
func (mr *MockIpamMockRecorder) ExecAdd(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecAdd", reflect.TypeOf((*MockIpam)(nil).ExecAdd), arg0, arg1)
}

// ExecCheck mocks base method.
func (m *MockIpam) ExecCheck(arg0 string, arg1 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecCheck", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecCheck indicates an expected call of ExecCheck.
func (mr *MockIpamMockRecorder) ExecCheck(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecCheck", reflect.TypeOf((*MockIpam)(nil).ExecCheck), arg0, arg1)
}

// ExecDel mocks base method.
func (m *MockIpam) ExecDel(arg0 string, arg1 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecDel", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecDel indicates an expected call of ExecDel.
func (mr *MockIpamMockRecorder) ExecDel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecDel", reflect.TypeOf((*MockIpam)(nil).ExecDel), arg0, arg1)
}
